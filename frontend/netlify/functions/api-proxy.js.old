// netlify/functions/api-proxy.jsconst axios = require("axios");// The actual backend URL - using environment variable or hardcoded backupconst BACKEND_URL = process.env.BACKEND_API_URL || "https://kcecell-backend-api.onrender.com";exports.handler = async function (event, context) {  // Get the path and HTTP method from the incoming request  const path = event.path.replace("/.netlify/functions/api-proxy", "");  const method = event.httpMethod.toLowerCase();  const headers = event.headers;  const queryParams = event.queryStringParameters || {};  // Allow CORS  const corsHeaders = {    "Access-Control-Allow-Origin": "*",    "Access-Control-Allow-Headers": "Content-Type, Authorization",    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS"  };  // Handle preflight OPTIONS request  if (method === "options") {    return {      statusCode: 200,      headers: corsHeaders,      body: JSON.stringify({ message: "CORS preflight successful" })    };  }  // Declare variables at the top level so they're accessible in catch block  const adjustedPath = path.replace(/^\/api/, "");  let url = `${BACKEND_URL}/api${adjustedPath}`;  let requestHeaders = { ...headers };  try {    console.log(`API Proxy Debug:      Path: ${path}      Adjusted Path: ${adjustedPath}      Backend URL: ${BACKEND_URL}      Full URL: ${url}      Method: ${method.toUpperCase()}    `);    // Filter out problematic headers    delete requestHeaders.host;    delete requestHeaders["x-forwarded-for"];    delete requestHeaders["x-forwarded-proto"];    delete requestHeaders["x-forwarded-port"];    delete requestHeaders["x-country"];    // Ensure content-type is set    if (!requestHeaders["content-type"]) {      requestHeaders["content-type"] = "application/json";    }    // Set up request options    const requestOptions = {      method: method,      url: url,      headers: requestHeaders,      params: queryParams    };    // Add body for non-GET/HEAD requests    if (method !== "get" && method !== "head" && event.body) {      try {        requestOptions.data = JSON.parse(event.body);      } catch (e) {        console.error("Error parsing request body:", e);        return {          statusCode: 400,          headers: corsHeaders,          body: JSON.stringify({ message: "Invalid request body" })        };      }    }    // Make the request to the backend    const response = await axios(requestOptions);    return {      statusCode: response.status,      headers: {        ...corsHeaders,        "Content-Type": response.headers["content-type"] || "application/json"      },      body: typeof response.data === "object" ? JSON.stringify(response.data) : response.data    };  } catch (error) {    console.error("API Proxy Error:", {      message: error.message,      path: path,      url: url,      method: method,      headers: requestHeaders,      body: event.body || "No body",      response: error.response?.data || "No response data"    });    // If we have a response from the backend, return it    if (error.response) {      return {        statusCode: error.response.status,        headers: corsHeaders,        body: typeof error.response.data === "object"          ? JSON.stringify(error.response.data)          : JSON.stringify({ message: error.message })      };    }    // Return a generic error if no response from backend    return {      statusCode: 502,      headers: corsHeaders,      body: JSON.stringify({        message: "Error connecting to backend server",        error: error.message,        path: path,        method: method,        url: url      })    };  }};